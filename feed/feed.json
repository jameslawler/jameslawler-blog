
{ "version": "https://jsonfeed.org/version/1.1", "title": "James Lawler", "language": "en", "home_page_url": "https://www.jameslawler.com/", "feed_url": "https://www.jameslawler.com/feed/feed.json", "description":
"I am writing about my experiences as a software developer.", "author": { "name": "James Lawler",
"url": "https://www.jameslawler.com/about-me/" }, "items": [ { "id": "https://www.jameslawler.com/articles/2025/06/20/cloudflare-developer-platform-experiences/", "url": "https://www.jameslawler.com/articles/2025/06/20/cloudflare-developer-platform-experiences/", "title": "Cloudflare Developer Platform experiences", "content_html": "<p>I recently published a new project called <a href=\"https://meals.jameslawler.com/\">Meal Planner</a>. I did a <a href=\"https://www.jameslawler.com/projects/meal-planner/\">write up</a> of the project and how I published it into the Cloudflare Developer Platform.</p>\n<p>Overall I had a very positive experience because of the way Cloudflare integrates with GitHub. Rather than needed to setup GitHub actions to build and deploy the project, this is all handled on the Cloudflare side. I connected the project into Cloudflare by giving access to that specific respository. On any pushes to the <code>main</code> or other branches it triggers a build process and can even handle versioned environments if I want to keep <code>main</code> only for production, and <code>feature</code> branches for internal usage.</p>\n<p>Each project could be connected to a different domain / sub domain and from the Cloudflare platform I have a nice overview of each project. This was much more difficuly before when I was running everything in a VPS under a docker host. Now I can have a quick overview of all logs, metrics, request durations, etc with minimal maintenance from my side. I can just focus on the project ideas and less on the infrastructure management.</p>\n<p>Compared to other cloud providers, with Cloudflare, I did not need to provide any payment details as long as I stay within their free tier limits. For small hobby projects like mine, this is not a problem, and even with a small user base I still don't think I would reach their limits.</p>\n", "date_published": "2025-06-20T00:00:00Z" }
, { "id": "https://www.jameslawler.com/articles/2025/02/22/how-I-created-a-daily-game/", "url": "https://www.jameslawler.com/articles/2025/02/22/how-I-created-a-daily-game/", "title": "How I created a daily game", "content_html": "<p>To help me learn European Portuguese and the genders of the vocabulary I set myself a goal of creating some web-based games. The games would ideally follow a daily concept, in the style of Wordle. Each day the game will reset to a new set of words, and everyone playing the game would see the same set of words.</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://www.jameslawler.com/img/h70y2JGudJ-1024.avif 1024w\"><source type=\"image/webp\" srcset=\"https://www.jameslawler.com/img/h70y2JGudJ-1024.webp 1024w\"><img alt=\"Daily Game\" loading=\"lazy\" decoding=\"async\" src=\"https://www.jameslawler.com/img/h70y2JGudJ-1024.png\" width=\"1024\" height=\"1024\"></picture></p>\n<h2>Project Structure</h2>\n<p>The <a href=\"https://github.com/jameslawler/daily-pfp\">project</a> is a standard NextJs website, built into static files and hosted on GitHub Pages. It is using ReactJs, TypeScript and TailwindCSS.</p>\n<h2>Daily Game Alogirthm</h2>\n<p>The method of randomizing the game each day is through the use of a hash on today's date. The has is then fed into an algorithm which sorts the array of questions in a predictable order based on the hash.</p>\n<pre class=\"language-ts\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> shuffleArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>array<span class=\"token operator\">:</span> GameData<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> seed<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> GameData<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> currentIndex <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n    temporaryValue<span class=\"token punctuation\">,</span>\n    randomIndex<span class=\"token punctuation\">;</span>\n  seed <span class=\"token operator\">=</span> seed <span class=\"token operator\">||</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">random</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>seed<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">-</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">!==</span> currentIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    randomIndex <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> currentIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    currentIndex <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    temporaryValue <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>currentIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    array<span class=\"token punctuation\">[</span>currentIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>randomIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    array<span class=\"token punctuation\">[</span>randomIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temporaryValue<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>The date is fed into the above function as a number by using the <code>date.getTime()</code> function and the algorithm performs a <code>Math.sin()</code> call using the seed value provided. The array is then shuffled item by item using the index randomizer until all items have been moved.</p>\n<p>The benefit of this algorithm is that as long as the length of the array stays the same, the array can be predictably sorted based on any date. This allows looking back in time to see the different games that were played without needing to store them.</p>\n<p>In case additional words are added to the game in the future, this can still be maintained by creating separate arrays which are date based, and only dates after the date based array are concatenated together.</p>\n<h2>Statistics Storage</h2>\n<p>The browser's local storage is used to store previous game information. Current two items are stored in the local storage;</p>\n<ol>\n<li><code>gender-game</code>: This key stores</li>\n</ol>\n<ul>\n<li>the date of last game</li>\n<li>the question index of the current question in the current game</li>\n<li>the game state of the current game</li>\n</ul>\n<ol start=\"2\">\n<li><code>gender-game-stats</code>: This key stores</li>\n</ol>\n<ul>\n<li>the overall top score</li>\n<li>past games array containing the date of the game and score achieved</li>\n</ul>\n<p>By combining all of this information from the local storage, the statistics page within the game can display the player their;</p>\n<ul>\n<li>number of days played</li>\n<li>highest score</li>\n<li>longest streak of days played in a row</li>\n<li>a nice GitHub style heatmap of their score progression over time</li>\n</ul>\n<p><picture><source type=\"image/avif\" srcset=\"https://www.jameslawler.com/img/96nDkD3w83-400.avif 400w\"><source type=\"image/webp\" srcset=\"https://www.jameslawler.com/img/96nDkD3w83-400.webp 400w\"><img alt=\"Daily Game Statistics\" loading=\"lazy\" decoding=\"async\" src=\"https://www.jameslawler.com/img/96nDkD3w83-400.png\" width=\"400\" height=\"368\"></picture></p>\n<h2>Project Future</h2>\n<p>I would like to keep the same game structure, but switch the content so I can train myself on other Portuguese grammar topics, like verb conjugations.</p>\n", "date_published": "2025-02-22T00:00:00Z" }
, { "id": "https://www.jameslawler.com/articles/2024/10/13/radio-framework-system-design/", "url": "https://www.jameslawler.com/articles/2024/10/13/radio-framework-system-design/", "title": "System Design using the RADIO structure", "content_html": "<p>During system design sessions for a project it is important to cover all your bases. During the initial phase when you have contact with the stakeholder of the project, it is important to make sure you ask enough questions to be able to fully undertand the requirements and make a proposal for the technical design.</p>\n<p><strong>RADIO</strong> stands for</p>\n<ul>\n<li>Requirements</li>\n<li>Architecture / High Level</li>\n<li>Data model</li>\n<li>Interface definition (API)</li>\n<li>Optimizations</li>\n</ul>\n<p>This structure is typically used for interviews with system design questions, but can be applied to daily work tasks.</p>\n<p>I first found the RADIO structure on the <a href=\"https://www.greatfrontend.com/system-design/framework\">Great Frontend</a> website and it provides a thorough description of how to use it. Originally it is defined for front end tasks, but in my opinion it is quite good for any type of system design task.</p>\n<p>In my <a href=\"https://notes.jameslawler.com/category/system-design\">Docusauraus</a> instance I have started to write up system designs using this RADIO structure. I create these system designs just for learning and fun and I don't claim them to be the &quot;perfect&quot; design.</p>\n<p>My first one is a simple <a href=\"https://notes.jameslawler.com/software-engineering/system-design/rate-limiter\">Rate Limiter</a> system design, and I will add more over time as learning exercises.</p>\n", "date_published": "2024-10-13T00:00:00Z" }
, { "id": "https://www.jameslawler.com/articles/2024/10/09/blog-rewrite-11ty/", "url": "https://www.jameslawler.com/articles/2024/10/09/blog-rewrite-11ty/", "title": "Why I rewrote my blog into 11ty", "content_html": "<p>The website running at jameslawler.com has changed many times over the years. Most recently I was using Ghost as platform for managing my blog posts and using GitHub as the website host. I wrote a few <a href=\"https://www.jameslawler.com/tags/ghost\">blog posts</a> about the process.</p>\n<p>The Ghost platform was a nice simple web interface to work with and it could run completely in Docker, so it didn't need to mess up my host machine. However over time it became more of a burden for my simple website.</p>\n<h2>Disadvantages</h2>\n<p>As I was running Ghost locally in a Docker container, I encountered the following issues;</p>\n<ul>\n<li>I frequently had problems logging in and had to remotely connect into the MySQL instance of Ghost within the Docker image to fix the credentials.</li>\n<li>I felt like I couldn't do much cutomization to the content of the pages / posts.</li>\n<li>I prefer the clean structure of a Markdown text file over a proprietry format provided by Ghost.</li>\n</ul>\n<h2>What I wanted</h2>\n<p>For a while It was perfectly fine using Ghost, but as the issues above because more frequent I found myself reluctant to want to make updates to my website. What I really wanted was something that could do the following;</p>\n<ul>\n<li>Be a static website that I can host in many places for free without server maintenance</li>\n<li>Work with Markdown files</li>\n<li>Work with Frontmatter format in markdown files so I can have simple template data defined and render it to the page</li>\n<li>Support templating</li>\n<li>Work with <a href=\"https://tailwindcss.com/\">TailwindCSS</a> for design implementation</li>\n</ul>\n<h2>What I changed to</h2>\n<p>In the past I have used <a href=\"https://www.11ty.dev/\">11ty</a> and found it to be a good solution to all of those issues above, and so I decided to switch my blog over to a simple 11ty blog structure.</p>\n<p>By defualt 11ty provides everything on the list, except for TailwindCSS support.</p>\n<h2>Adding TailwindCSS</h2>\n<p>To add TailwindCSS support, I followed a <a href=\"https://dev.to/psypher1/lets-learn-11ty-part-7-adding-tailwind-5cdh\">simple guide</a> I found and then completely stripped out any existing css files from the 11ty project to be sure everything was TailwindCSS driven for the front end design.</p>\n<h2>Conclusion</h2>\n<p>At the moment I am really happy with the <a href=\"https://github.com/jameslawler/jameslawler-blog\">outcome</a>. I have a very simple repository in GitHub that stores all of my content in markdown files. I only needed to create a few simple templates for generating the HTML files.</p>\n<p>Any time I make an update to the repostiory, it automatically builds in GitHub Actions and publishes the updates to the GitHub Pages.</p>\n<p>Overall the maintenance is light-weight and my content is fully portable if I want to move to another system in the future.</p>\n", "date_published": "2024-10-09T00:00:00Z" }
, { "id": "https://www.jameslawler.com/articles/2021/12/17/private-repository-to-build-and-deploy-ghost-blog/", "url": "https://www.jameslawler.com/articles/2021/12/17/private-repository-to-build-and-deploy-ghost-blog/", "title": "Private Repository to Build and Deploy Ghost Blog", "content_html": "<p>This is a follow up from a previous post about setting up a Ghost Blog on GitHub pages using GitHub Actions. In that post I described using a public GitHub repository to host both the Ghost content folder and the generated static website. In this post I will show how to keep the Ghost content folder in a private repository and only host the generated static website in a public repository.</p>\n<h2>What you need</h2>\n<ul>\n<li>A public repository in GitHub that will hold the generated static website</li>\n<li>A private repository in GitHub that will hold your content folder and GitHub workflow</li>\n</ul>\n<h2>Public Repository</h2>\n<p>Simply create a new repository in GitHub. You don't need to commit or push anything to it. This will happen automatically. The only thing you need to do is go to the repository settings and enable GitHub Pages on the <strong>gh-pages</strong> branch.</p>\n<h2>Private Repository</h2>\n<p>Create a private repository in GitHub and setup your Ghost blog by following the guide from my previous post. The different is in the GitHub workflow file. Here you need to configure the <strong>Deploy to GitHub Pages</strong> step to deploy to a different repository within your account.</p>\n<pre class=\"language-yaml\" tabindex=\"0\"><code class=\"language-yaml\"><span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy to GitHub Pages\n  <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> JamesIves/github<span class=\"token punctuation\">-</span>pages<span class=\"token punctuation\">-</span>deploy<span class=\"token punctuation\">-</span>action@4.1.7\n  <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> gh<span class=\"token punctuation\">-</span>pages\n  <span class=\"token key atrule\">folder</span><span class=\"token punctuation\">:</span> static\n  <span class=\"token key atrule\">token</span><span class=\"token punctuation\">:</span> $\n  <span class=\"token key atrule\">repository-name</span><span class=\"token punctuation\">:</span> jameslawler/jameslawler<span class=\"token punctuation\">-</span>website</code></pre>\n<p>By default, your GitHub workflow won't have permission to manipulate another repository. In order to do this, you need to <a href=\"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token\">create a Personal Access Token</a>. The token should have at least the <strong>public_repo</strong> permission.</p>\n<p>Once you have the token you need to make it available to your GitHub workflow. Since this repository is private, you could just put it straight in the source code. But for better security practices, I would use a <strong>secret</strong> which can be <a href=\"https://docs.github.com/en/actions/security-guides/encrypted-secrets#creating-encrypted-secrets-for-a-repository\">configured at the repository</a> and then is passed to the <a href=\"https://docs.github.com/en/actions/security-guides/encrypted-secrets#using-encrypted-secrets-in-a-workflow\">GitHub workflow inside a secret context</a>.</p>\n<h2>Testing it out</h2>\n<p>Once you have the public and private repositories setup, and you have the GitHub workflow modifications to connect the two repositories together, it is time to test it out. Trigger the GitHub workflow on the private repository. This will build the Ghost static site, and then push it to the <strong>gh-pages</strong> branch of the public repository. Within a few minutes, the blog will be available on your GitHub pages url.</p>\n<h2>Summary</h2>\n<p>I set this up with a two repository approach myself because I wanted to keep the Ghost content folder and database secret. The content folder contains upcoming posts, theme code, and also anyone can connect to the database file directly and look inside the tables. This way, the only public potion is the generated static files which the user will be able to see anyway when browsing the blog.</p>\n", "date_published": "2021-12-17T00:00:00Z" }
, { "id": "https://www.jameslawler.com/articles/2021/12/11/scheduled-posts-with-ghost-and-github-actions/", "url": "https://www.jameslawler.com/articles/2021/12/11/scheduled-posts-with-ghost-and-github-actions/", "title": "Scheduled Posts with Ghost and GitHub Actions", "content_html": "<p>Sometimes I want posts in my Ghost blog to only publish in the future on a set date. Ghost has the feature built in, but it is intended to be used with a dynamic Ghost blog that will instantly show the new post when the scheduled date is reached. As I run a static Ghost blog, I wanted to be able to have the same possibilities. To see how I setup a static Ghost blog on GitHub Pages you can see <a href=\"https://www.jameslawler.com/tags/ghost/\">my other posts</a> on the topic.</p>\n<h2>Scheduled Posts</h2>\n<p>In the Ghost editor when you save an article you have the option to <strong>Set it live now</strong> or <strong><em>Schedule it for later</em></strong>. When you want to publish later, you can choose the date and time of the scheduled post.</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://www.jameslawler.com/img/tVzU4dhtzl-361.avif 361w\"><source type=\"image/webp\" srcset=\"https://www.jameslawler.com/img/tVzU4dhtzl-361.webp 361w\"><img alt=\"Ghost publish options\" loading=\"lazy\" decoding=\"async\" src=\"https://www.jameslawler.com/img/tVzU4dhtzl-361.png\" width=\"361\" height=\"330\"></picture></p>\n<p>In order for the post to go live at the specified date and time, the Ghost server needs to be running. In order to achieve this, I have setup GitHub Actions to run automatically once a day on a fixed schedule. The workflow is the same as the previous posts with the addition of a <a href=\"https://crontab.guru/\">cron</a> schedule to the trigger section.</p>\n<pre class=\"language-yaml\" tabindex=\"0\"><code class=\"language-yaml\"><span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span>\n  <span class=\"token key atrule\">schedule</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">cron</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"0 20 * * *\"</span></code></pre>\n<p>This workflow will trigger on a push to the <strong>main</strong> branch, or everyday at 8pm UTC time. It is important to note that the cron schedule uses UTC time and so you will need to adjust it if you want it to match your local time. To have more granular post times, you would need to increase the frequency of the cron schedule.</p>\n<h2>Perfect Streak</h2>\n<p>The only &quot;negative&quot; with this approach is that it automatically makes daily commits to one of your repositories and it makes your GitHub contributions graph look not so honest.</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://www.jameslawler.com/img/ngCV2yWaAY-1334.avif 1334w\"><source type=\"image/webp\" srcset=\"https://www.jameslawler.com/img/ngCV2yWaAY-1334.webp 1334w\"><img alt=\"GitHub streak graph\" loading=\"lazy\" decoding=\"async\" src=\"https://www.jameslawler.com/img/ngCV2yWaAY-1334.png\" width=\"1334\" height=\"325\"></picture></p>\n<p>You can see that from December onwards is when I enabled the daily GitHub Action to build and deploy my static Ghost blog. But apart from that, the solution is simple and works.</p>\n<h2>Summary</h2>\n<p>Using GitHub Actions with a cron schedule allows scheduled Ghost posts to go live within an acceptable timeframe of the publish date. I would say this is fine for a personal blog with infrequent posts. In the future I want to find a way to not publish to GitHub Pages if there were no updates. Perhaps checking if any new urls have been generated since the last time.</p>\n", "date_published": "2021-12-11T00:00:00Z" }
, { "id": "https://www.jameslawler.com/articles/2021/12/04/custom-domain-for-static-ghost-blog-on-github-pages/", "url": "https://www.jameslawler.com/articles/2021/12/04/custom-domain-for-static-ghost-blog-on-github-pages/", "title": "Custom Domain for Static Ghost Blog on GitHub Pages", "content_html": "<p>In this post I will share how I run this static Ghost blog for free using GitHub Pages and a custom domain. This is a continuation from my previous post about starting a static Ghost blog on GitHub Pages.</p>\n<h2>GitHub Workflow</h2>\n<p>The only change needed for the GitHub Workflow file is to generate the static ghost site using the <strong>--url</strong> parameter pointing to your custom domain.</p>\n<pre class=\"language-yaml\" tabindex=\"0\"><code class=\"language-yaml\"><span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Generate Static Site\n  <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> gssg <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>url https<span class=\"token punctuation\">:</span>//www.jameslawler.com</code></pre>\n<h2>GitHub Pages Settings</h2>\n<p>On the GitHub Pages settings page you need to specify your custom domain, for example <strong>www.jameslawler.com</strong></p>\n<p><picture><source type=\"image/avif\" srcset=\"https://www.jameslawler.com/img/py0z9ofhOO-1517.avif 1517w\"><source type=\"image/webp\" srcset=\"https://www.jameslawler.com/img/py0z9ofhOO-1517.webp 1517w\"><img alt=\"Custom domain configuration example\" loading=\"lazy\" decoding=\"async\" src=\"https://www.jameslawler.com/img/py0z9ofhOO-1517.png\" width=\"1517\" height=\"734\"></picture></p>\n<h2>Domain DNS Settings</h2>\n<p>The final step is to configure your domain name registry to point your domain name to GitHub Pages IP addresses. Depending on the domain registry they will have different interfaces to change the settings.</p>\n<pre class=\"language-yaml\" tabindex=\"0\"><code class=\"language-yaml\">        A record for @ pointing to 185.199.108.153\n        A record for @ pointing to 185.199.109.153\n        A record for @ pointing to 185.199.110.153\n        A record for @ pointing to 185.199.111.153\n        <span class=\"token key atrule\">CNAME record for www pointing to your username.github.io (the username should be replaced with your actual GitHub account username)</span><span class=\"token punctuation\">:</span></code></pre>\n<p>A lot of registrars have pages showing how to setup GitHub Pages on your domain. For example with Namecheap, you can see the information here. <a href=\"https://www.namecheap.com/support/knowledgebase/article.aspx/9645/2208/how-do-i-link-my-domain-to-github-pages/\">https://www.namecheap.com/support/knowledgebase/article.aspx/9645/2208/how-do-i-link-my-domain-to-github-pages/</a></p>\n<h2>Summary</h2>\n<p>It can take some time (minutes to hours) for DNS records to update and for you to see your GitHub Page running on your custom domain. When it is up and running, check to make sure all the links work on your page, so you can confirm the <strong>gssg</strong> generation worked successfully.</p>\n", "date_published": "2021-12-04T00:00:00Z" }
, { "id": "https://www.jameslawler.com/articles/2021/11/27/ghost-blog-on-github-pages-using-github-actions/", "url": "https://www.jameslawler.com/articles/2021/11/27/ghost-blog-on-github-pages-using-github-actions/", "title": "Ghost Blog on GitHub Pages using GitHub Actions", "content_html": "<p>In this post I will share how I built up this website for free using Ghost CMS, GitHub Pages, and GitHub Actions.</p>\n<h2>Ghost</h2>\n<p><a href=\"https://ghost.org/\">Ghost</a> is a content management system for self publishing your own website - and it can be self hosted in a Docker container. To start this project you need to be running the Ghost Docker container on your development computer. This means you need to have Docker installed locally - and there is a <a href=\"https://docs.docker.com/get-docker/\">handy guide</a> on the Docker website for the main operating systems.</p>\n<p>Before starting up the Ghost Docker container you will need a directory where you can store the Ghost content (static assets, SQL database, etc). For this post I setup a <a href=\"https://github.com/jameslawlercom/2021-11-27-ghost-blog-on-github-pages-using-github-actions\">new repository</a> in GitHub to store the content so it would stay under version control.</p>\n<p>To start the Ghost Docker container on your local machine, open a console and navigate to the directory you have setup with a GitHub repository and execute the following command.</p>\n<blockquote>\n<p>docker run -d -p 2368:2368 -v content:/var/lib/ghost/content ghost:alpine</p>\n</blockquote>\n<p>This command will run up the latest version of Ghost using the <a href=\"https://hub.docker.com/_/ghost\">alpine Docker image</a>. It will run on the standard <strong>2368</strong> port and mount the current <strong>content</strong> directory into the Docker container at <strong>/var/lib/ghost/content</strong>. This means that any changes to the Ghost instance (new posts, theme, etc) will be exposed to the current working folder and can be committed to GitHub.</p>\n<p>After running the command, you should be able to access the locally running version of Ghost at <strong>http:// localhost:2368/</strong>. At first you will need to setup an account (only saved in your local database), and then you will be able to add new pages, posts, and change the navigation settings etc. You will also be able to configure the theme for your website.</p>\n<h2>GitHub Workflow</h2>\n<p>Once there is a locally running instance of Ghost, the next step is to get it running in GitHub Pages. The key to do this is using GitHub Actions with the help of a GitHub workflow. To setup a GitHub workflow you need to add a <strong>.github\\workflows</strong> folder. Each GitHub workflow is just a <strong>yaml</strong> file within this directory.</p>\n<pre class=\"language-yaml\" tabindex=\"0\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy Ghost and Generate Static Site\n\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n<span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n<span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span>\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n<span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n<span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n<span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Check out Model Repository\n<span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> <span class=\"token key atrule\">actions/checkout@v2 - name</span><span class=\"token punctuation\">:</span> Run Ghost\n<span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token key atrule\">docker run -d -p 2368:2368 -v $/content:/var/lib/ghost/content ghost:alpine - name</span><span class=\"token punctuation\">:</span> Sleep for 10 seconds\n<span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> jakejarvis/wait<span class=\"token punctuation\">-</span>action@master\n<span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n<span class=\"token key atrule\">time</span><span class=\"token punctuation\">:</span> \"10s\" <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Install ghost<span class=\"token punctuation\">-</span>static<span class=\"token punctuation\">-</span>site<span class=\"token punctuation\">-</span>generator\n<span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token key atrule\">npm install -g ghost-static-site-generator - name</span><span class=\"token punctuation\">:</span> Generate Static Site\n<span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token key atrule\">gssg --url https://jameslawlercom.github.io --subDir 2021-11-27-ghost-blog-on-github-pages-using-github-actions - name</span><span class=\"token punctuation\">:</span> Deploy to Github Pages\n<span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> JamesIves/github<span class=\"token punctuation\">-</span>pages<span class=\"token punctuation\">-</span>deploy<span class=\"token punctuation\">-</span>action@4.1.7\n<span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n<span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> gh<span class=\"token punctuation\">-</span>pages\n<span class=\"token key atrule\">folder</span><span class=\"token punctuation\">:</span> static</code></pre>\n<p>In the first section, the trigger is configured. This means that this GitHub workflow will run when a commit is made on the <strong>main</strong> branch.</p>\n<pre class=\"language-yaml\" tabindex=\"0\"><code class=\"language-yaml\"><span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n<span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n<span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span></code></pre>\n<p>The scripts section defines the different scripts that will run one after the other during the GitHub workflow. The first simply checks out the latest version of the code to the build instance.</p>\n<pre class=\"language-yaml\" tabindex=\"0\"><code class=\"language-yaml\"><span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n<span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n<span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n<span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Check out Model Repository\n<span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2</code></pre>\n<p>The next script is similar to the command we use to run Ghost locally. This will actually run up the instance of Ghost on the GitHub Actions build virtual machine. The main difference here is the use of the build parameter <strong>$</strong> to access the path to the working directory of the build folder.</p>\n<pre class=\"language-yaml\" tabindex=\"0\"><code class=\"language-yaml\"><span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Run Ghost\n  <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> docker run <span class=\"token punctuation\">-</span>d <span class=\"token punctuation\">-</span>p 2368<span class=\"token punctuation\">:</span>2368 <span class=\"token punctuation\">-</span>v $/content<span class=\"token punctuation\">:</span>/var/lib/ghost/content ghost<span class=\"token punctuation\">:</span>alpine</code></pre>\n<p>As Ghost can take a few seconds to start up, a wait script is added to pause the process for 10 seconds.</p>\n<pre class=\"language-yaml\" tabindex=\"0\"><code class=\"language-yaml\"><span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Sleep for 10 seconds\n  <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> jakejarvis/wait<span class=\"token punctuation\">-</span>action@master\n  <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">time</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"10s\"</span></code></pre>\n<p>Once enough time has passed, the next script installs globally a npm script that can crawl the Ghost instance and generate a static version of the website.</p>\n<pre class=\"language-yaml\" tabindex=\"0\"><code class=\"language-yaml\"><span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Install ghost<span class=\"token punctuation\">-</span>static<span class=\"token punctuation\">-</span>site<span class=\"token punctuation\">-</span>generator\n  <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> npm install <span class=\"token punctuation\">-</span>g ghost<span class=\"token punctuation\">-</span>static<span class=\"token punctuation\">-</span>site<span class=\"token punctuation\">-</span>generator</code></pre>\n<p>The next script will run this tool to do the crawl and generate a static version of the website into a folder called <strong>static</strong>. The <strong>--url</strong> property is used to specify the base domain of the static website (in this case a GitHub Pages site). The <strong>--subDir</strong> property is used to specify a sub folder of the static website (in this case the name of the GitHub Pages project name).</p>\n<pre class=\"language-yaml\" tabindex=\"0\"><code class=\"language-yaml\"><span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Generate Static Site\n  <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> gssg <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>url https<span class=\"token punctuation\">:</span>//jameslawlercom.github.io <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>subDir 2021<span class=\"token punctuation\">-</span>11<span class=\"token punctuation\">-</span>27<span class=\"token punctuation\">-</span>ghost<span class=\"token punctuation\">-</span>blog<span class=\"token punctuation\">-</span>on<span class=\"token punctuation\">-</span>github<span class=\"token punctuation\">-</span>pages<span class=\"token punctuation\">-</span>using<span class=\"token punctuation\">-</span>github<span class=\"token punctuation\">-</span>actions</code></pre>\n<p>Finally the last script will deploy the <strong>static</strong> folder which contains our website to the <strong>gh-pages</strong> branch of the repository so that it is available on GitHub Pages.</p>\n<pre class=\"language-yaml\" tabindex=\"0\"><code class=\"language-yaml\"><span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy to Github Pages\n  <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> JamesIves/github<span class=\"token punctuation\">-</span>pages<span class=\"token punctuation\">-</span>deploy<span class=\"token punctuation\">-</span>action@4.1.7\n  <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> gh<span class=\"token punctuation\">-</span>pages\n  <span class=\"token key atrule\">folder</span><span class=\"token punctuation\">:</span> static</code></pre>\n<h2>GitHub Pages</h2>\n<p>The last stage of this project is to enable GitHub Pages on your repository. This is done via the <strong>Pages</strong> tab in the <a href=\"https://github.com/jameslawlercom/2021-11-27-ghost-blog-on-github-pages-using-github-actions/settings/pages\">repository settings</a>.</p>\n<h2>Summary</h2>\n<p>After updating your blog using the Ghost admin website and push push to the main branch the changes, the ghost blog will be started in a docker container on the GitHub Actions server, a static version will be crawled automatically and then saved to the GitHub pages branch of the repository. A few minutes later, your website will be running on your GitHub Pages website.</p>\n<p>There is a demonstration repository available <a href=\"https://github.com/jameslawlercom/2021-11-27-ghost-blog-on-github-pages-using-github-actions\">here</a> which demonstrates the <a href=\"https://github.com/jameslawlercom/2021-11-27-ghost-blog-on-github-pages-using-github-actions/actions\">GitHub Actions</a> and <a href=\"https://jameslawlercom.github.io/2021-11-27-ghost-blog-on-github-pages-using-github-actions/\">GitHub Pages</a> project.</p>\n", "date_published": "2021-11-27T00:00:00Z" }
 ] }
